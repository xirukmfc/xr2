.PHONY: help up up-local down restart logs status clean health

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN := \033[0;32m
YELLOW := \033[1;33m
RED := \033[0;31m
NC := \033[0m # No Color

help: ## –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
	@echo "$(GREEN)xR2 Platform - Makefile Commands$(NC)"
	@echo "=================================="
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "$(YELLOW)%-20s$(NC) %s\n", $$1, $$2}'
	@echo ""
	@echo "$(YELLOW)–î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:$(NC) ./start.sh"

##@ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã

up: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –í–°–ï (–¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞/production) - backend + frontend –≤ Docker
	@echo "$(GREEN)üöÄ –ó–∞–ø—É—Å–∫ xR2 Platform (Production - –≤—Å–µ –≤ Docker)$(NC)"
	@echo ""
	@echo "$(YELLOW)–ü—Ä–æ–≤–µ—Ä–∫–∞ .env.prod —Ñ–∞–π–ª–∞...$(NC)"
	@if [ ! -f .env.prod ]; then \
		echo "$(RED)‚ùå –§–∞–π–ª .env.prod –Ω–µ –Ω–∞–π–¥–µ–Ω!$(NC)"; \
		echo "$(YELLOW)–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env.prod –Ω–∞ –æ—Å–Ω–æ–≤–µ env.example$(NC)"; \
		exit 1; \
	fi
	@echo "$(YELLOW)–°–±–æ—Ä–∫–∞ frontend –æ–±—Ä–∞–∑–∞...$(NC)"
	@docker build -t xr2-frontend:latest ./prompt-editor
	@echo ""
	@echo "$(YELLOW)–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...$(NC)"
	@docker-compose --env-file .env.prod -f docker-compose.prod.yml -p xr2-platform up -d
	@sleep 10
	@docker-compose --env-file .env.prod -f docker-compose.prod.yml -p xr2-platform ps
	@echo ""
	@echo "$(GREEN)‚úÖ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –∑–∞–ø—É—â–µ–Ω–∞!$(NC)"
	@echo "$(YELLOW)–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: http://localhost$(NC)"
	@echo "$(YELLOW)Admin: http://localhost/admin$(NC)"
	@echo "$(YELLOW)API Docs: http://localhost/docs$(NC)"

up-local: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (—Ç–æ–ª—å–∫–æ backend –≤ Docker)
	@echo "$(GREEN)üõ†Ô∏è  –ó–∞–ø—É—Å–∫ backend –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏$(NC)"
	@docker-compose -p xr2-platform up -d
	@echo ""
	@echo "$(GREEN)‚úÖ Backend –∑–∞–ø—É—â–µ–Ω!$(NC)"
	@echo "$(YELLOW)–¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ frontend:$(NC)"
	@echo "  cd prompt-editor && pnpm dev"
	@echo ""
	@echo "$(YELLOW)–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:$(NC) ./start.sh (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç –∏ backend –∏ frontend)"

down: ## –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
	@echo "$(RED)üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...$(NC)"
	@docker-compose -p xr2-platform down 2>/dev/null || true
	@docker-compose --env-file .env.prod -f docker-compose.prod.yml -p xr2-platform down 2>/dev/null || true
	@pkill -f "next dev" || true
	@echo "$(GREEN)‚úÖ –°–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã$(NC)"

restart: ## –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã
	@docker-compose -p xr2-platform restart 2>/dev/null || docker-compose -f docker-compose.prod.yml -p xr2-platform restart
	@echo "$(GREEN)‚úÖ –°–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã$(NC)"

##@ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥

status: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
	@echo "$(GREEN)Development —Å–µ—Ä–≤–∏—Å—ã:$(NC)"
	@docker-compose -p xr2-platform ps 2>/dev/null || echo "  –ù–µ –∑–∞–ø—É—â–µ–Ω—ã"
	@echo ""
	@echo "$(GREEN)Production —Å–µ—Ä–≤–∏—Å—ã:$(NC)"
	@docker-compose --env-file .env.prod -f docker-compose.prod.yml -p xr2-platform ps 2>/dev/null || echo "  –ù–µ –∑–∞–ø—É—â–µ–Ω—ã"
	@echo ""
	@ps aux | grep "next dev" | grep -v grep > /dev/null && echo "$(GREEN)‚úÖ Frontend (local):$(NC) Running" || echo "$(YELLOW)‚ùå Frontend (local):$(NC) Not running"

logs: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
	@docker-compose -p xr2-platform logs -f 2>/dev/null || docker-compose --env-file .env.prod -f docker-compose.prod.yml -p xr2-platform logs -f

logs-app: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	@docker-compose -p xr2-platform logs -f app 2>/dev/null || docker-compose --env-file .env.prod -f docker-compose.prod.yml -p xr2-platform logs -f app

logs-nginx: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ nginx
	@docker-compose -p xr2-platform logs -f nginx 2>/dev/null || docker-compose --env-file .env.prod -f docker-compose.prod.yml -p xr2-platform logs -f nginx

logs-db: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	@docker-compose -p xr2-platform logs -f postgres 2>/dev/null || docker-compose --env-file .env.prod -f docker-compose.prod.yml -p xr2-platform logs -f postgres

logs-frontend: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ frontend (production)
	@docker-compose --env-file .env.prod -f docker-compose.prod.yml -p xr2-platform logs -f frontend

health: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–∏—Å–æ–≤
	@echo "$(GREEN)üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤...$(NC)"
	@echo ""
	@curl -s http://localhost/health 2>/dev/null | grep -q "healthy" && echo "$(GREEN)‚úÖ Nginx: OK$(NC)" || echo "$(RED)‚ùå Nginx: FAIL$(NC)"
	@curl -s http://localhost:8000/health 2>/dev/null | grep -q "healthy" && echo "$(GREEN)‚úÖ API: OK$(NC)" || echo "$(RED)‚ùå API: FAIL$(NC)"
	@docker exec xr2_postgres pg_isready -U xr2_user > /dev/null 2>&1 && echo "$(GREEN)‚úÖ PostgreSQL: OK$(NC)" || echo "$(RED)‚ùå PostgreSQL: FAIL$(NC)"
	@docker exec xr2_redis redis-cli ping > /dev/null 2>&1 && echo "$(GREEN)‚úÖ Redis: OK$(NC)" || echo "$(RED)‚ùå Redis: FAIL$(NC)"
	@curl -s http://localhost:3000 > /dev/null 2>&1 && echo "$(GREEN)‚úÖ Frontend: OK$(NC)" || echo "$(YELLOW)‚ö†Ô∏è  Frontend: Not accessible$(NC)"

##@ –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ

clean: ## –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã (volumes, networks, images)
	@echo "$(RED)‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ —É–¥–∞–ª–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ!$(NC)"
	@read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? [y/N] " -n 1 -r; \
	echo; \
	if [[ $$REPLY =~ ^[Yy]$$ ]]; then \
		docker-compose -p xr2-platform down -v 2>/dev/null || true; \
		docker-compose --env-file .env.prod -f docker-compose.prod.yml -p xr2-platform down -v 2>/dev/null || true; \
		echo "$(GREEN)‚úÖ –†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã$(NC)"; \
	fi

rebuild: ## –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –≤—Å–µ –æ–±—Ä–∞–∑—ã
	@echo "$(YELLOW)üî® –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤...$(NC)"
	@docker-compose build --no-cache
	@docker-compose --env-file .env.prod -f docker-compose.prod.yml build --no-cache
	@docker build --no-cache -t xr2-frontend:latest ./prompt-editor
	@echo "$(GREEN)‚úÖ –û–±—Ä–∞–∑—ã –ø–µ—Ä–µ—Å–æ–±—Ä–∞–Ω—ã$(NC)"

##@ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö

db-shell: ## –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL
	@docker exec -it xr2_postgres psql -U xr2_user -d xr2_db 2>/dev/null || docker exec -it xr2_postgres_prod psql -U xr2_user -d xr2_db

db-backup: ## –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	@echo "$(GREEN)üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞...$(NC)"
	@mkdir -p backups
	@docker exec xr2_postgres pg_dump -U xr2_user xr2_db > backups/backup_$$(date +%Y%m%d_%H%M%S).sql 2>/dev/null || \
	 docker exec xr2_postgres_prod pg_dump -U xr2_user xr2_db > backups/backup_$$(date +%Y%m%d_%H%M%S).sql
	@echo "$(GREEN)‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω –≤ backups/$(NC)"

db-restore: ## –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±—ç–∫–∞–ø–∞
	@echo "$(YELLOW)üì• –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞...$(NC)"
	@BACKUP=$$(ls -t backups/*.sql | head -1); \
	if [ -z "$$BACKUP" ]; then \
		echo "$(RED)‚ùå –ë—ç–∫–∞–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã$(NC)"; \
	else \
		docker exec -i xr2_postgres psql -U xr2_user xr2_db < "$$BACKUP" 2>/dev/null || \
		docker exec -i xr2_postgres_prod psql -U xr2_user xr2_db < "$$BACKUP"; \
		echo "$(GREEN)‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ $$BACKUP$(NC)"; \
	fi
