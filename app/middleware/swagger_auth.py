from fastapi import Request, HTTPException, status
from fastapi.responses import RedirectResponse
from starlette.middleware.base import BaseHTTPMiddleware
from starlette.responses import Response
import base64
from typing import Optional, Tuple
import secrets
import hashlib
from datetime import datetime, timedelta

from app.core.config import settings


class SwaggerAuthMiddleware(BaseHTTPMiddleware):
    """Middleware –¥–ª—è –∑–∞—â–∏—Ç—ã –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ Swagger –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    
    def __init__(self, app, admin_path: str = "/admin-docs"):
        super().__init__(app)
        self.admin_path = admin_path
        # –ü—Ä–æ—Å—Ç–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self._sessions = {}
    
    def _check_admin_credentials(self, username: str, password: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        return (
            username == settings.ADMIN_USERNAME and 
            password == settings.ADMIN_PASSWORD
        )
    
    def _create_session(self, username: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        session_id = secrets.token_urlsafe(32)
        self._sessions[session_id] = {
            "username": username,
            "created_at": datetime.now(),
            "expires_at": datetime.now() + timedelta(hours=1)  # –°–µ—Å—Å–∏—è –Ω–∞ 1 —á–∞—Å
        }
        return session_id
    
    def _is_session_valid(self, session_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏"""
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–π —Å–µ—Å—Å–∏–∏
        return session_id == "admin_authenticated"
    
    def _get_auth_from_header(self, request: Request) -> Optional[Tuple[str, str]]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ username:password –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization"""
        auth_header = request.headers.get("Authorization")
        if not auth_header or not auth_header.startswith("Basic "):
            return None
        
        try:
            encoded_credentials = auth_header[6:]  # –£–±–∏—Ä–∞–µ–º "Basic "
            decoded_credentials = base64.b64decode(encoded_credentials).decode("utf-8")
            username, password = decoded_credentials.split(":", 1)
            return username, password
        except Exception:
            return None
    
    def _get_session_from_cookie(self, request: Request) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ session_id –∏–∑ cookie"""
        return request.cookies.get("swagger_session")
    
    def _create_login_page(self) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –≤—Ö–æ–¥–∞"""
        return """
        <!DOCTYPE html>
        <html>
        <head>
            <title>xR2 Admin Swagger - Login</title>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <style>
                body {
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    margin: 0;
                    padding: 0;
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    min-height: 100vh;
                }
                .login-container {
                    background: white;
                    padding: 2rem;
                    border-radius: 10px;
                    box-shadow: 0 10px 25px rgba(0,0,0,0.1);
                    width: 100%;
                    max-width: 400px;
                }
                .login-header {
                    text-align: center;
                    margin-bottom: 2rem;
                }
                .login-header h1 {
                    color: #333;
                    margin: 0;
                    font-size: 1.5rem;
                }
                .login-header p {
                    color: #666;
                    margin: 0.5rem 0 0 0;
                    font-size: 0.9rem;
                }
                .form-group {
                    margin-bottom: 1rem;
                }
                .form-group label {
                    display: block;
                    margin-bottom: 0.5rem;
                    color: #333;
                    font-weight: 500;
                }
                .form-group input {
                    width: 100%;
                    padding: 0.75rem;
                    border: 1px solid #ddd;
                    border-radius: 5px;
                    font-size: 1rem;
                    box-sizing: border-box;
                }
                .form-group input:focus {
                    outline: none;
                    border-color: #667eea;
                    box-shadow: 0 0 0 2px rgba(102, 126, 234, 0.2);
                }
                .login-button {
                    width: 100%;
                    padding: 0.75rem;
                    background: #667eea;
                    color: white;
                    border: none;
                    border-radius: 5px;
                    font-size: 1rem;
                    cursor: pointer;
                    transition: background 0.2s;
                }
                .login-button:hover {
                    background: #5a6fd8;
                }
                .error-message {
                    color: #e74c3c;
                    text-align: center;
                    margin-top: 1rem;
                    font-size: 0.9rem;
                }
            </style>
        </head>
        <body>
            <div class="login-container">
                <div class="login-header">
                    <h1>üîê xR2 Admin Swagger</h1>
                </div>
                <form method="post" action="/admin-docs/login">
                    <div class="form-group">
                        <label for="username">Username:</label>
                        <input type="text" id="username" name="username" required>
                    </div>
                    <div class="form-group">
                        <label for="password">Password:</label>
                        <input type="password" id="password" name="password" required>
                    </div>
                    <button type="submit" class="login-button">–í–æ–π—Ç–∏</button>
                </form>
            </div>
        </body>
        </html>
        """
    
    async def dispatch(self, request: Request, call_next):
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ middleware"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –∫ –∞–¥–º–∏–Ω—Å–∫–æ–º—É Swagger
        if request.url.path.startswith(self.admin_path):
            
            # –ò—Å–∫–ª—é—á–∞–µ–º endpoint –ª–æ–≥–∏–Ω–∞ –∏–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏
            if request.url.path == f"{self.admin_path}/login":
                response = await call_next(request)
                return response
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            session_id = self._get_session_from_cookie(request)
            if not session_id or not self._is_session_valid(session_id):
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
                if request.url.path == self.admin_path or request.url.path == f"{self.admin_path}/":
                    return Response(
                        content=self._create_login_page(),
                        media_type="text/html"
                    )
                else:
                    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
                    return RedirectResponse(url=self.admin_path, status_code=302)
        
        # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        response = await call_next(request)
        return response
